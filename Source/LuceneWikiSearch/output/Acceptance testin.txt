Acceptance testing]]In engineering and its various fields of engineering|subdisciplines, acceptance testing is a test conducted to determine if the requirements of a specification or contract are met.  It may involve  chemical tests, physical tests, or performance tests. In  , black-box testing, QA testing, application testing, confidence testing, final testing, validation testing, or factory acceptance testing.  user acceptance testing (UAT), end-user testing, site (acceptance) testing, or field (acceptance) testing.A smoke test is used as an acceptance test prior to introducing a build to the main testing process.Testing generally involves running a suite of tests on the completed system. Each individual test, known as a case, exercises a particular operating condition of the users environment or feature of the system, and will result in a pass or fail, or boolean logic|boolean, outcome. There is generally no degree of success or failure. The test environment is usually designed to be identical, or as close as possible, to the anticipated users environment, including extremes of such. These test cases must each be accompanied by test case input data or a formal description of the operational activities (or both) to be performedâ€”intended to thoroughly exercise the specific caseâ€”and a formal description of the expected results. business domain language. These are high-level tests to test the completeness of a user story or stories played during any sprint/iteration. These tests are created ideally through collaboration between business customers, business analysts, testers and developers, however the business customers (product owners) are the primary owners of these tests. As the user stories pass their acceptance criteria, the business owners can be sure of the fact that the developers are progressing in the right direction about how the application was envisaged to work and so its essential that these tests include both business logic tests as well as UI validation elements (if need be).Acceptance test cards are ideally created during sprint planning or iteration planning meeting, before development begins so that the developers have a clear idea of what to develop. Sometimes (due to bad planning!) acceptance tests may span multiple stories (that are not implemented in the same sprint) and there are different ways to test them out during actual sprints. One popular technique is to mock external interfaces or data to mimic other stories which might not be played out during an iteration (as those stories may have been relatively lower business priority). A user story is not considered complete until the acceptance tests have passed.The acceptance test suite is run against the supplied input data or using an acceptance test script to direct the testers. Then the results obtained are compared with the expected results. If there is a correct match for every case, the test suite is said to pass. If not, the system may either be rejected or accepted on conditions previously agreed between the sponsor and the manufacturer. quality gateway, where any quality defects not previously detected may be uncovered.A principal purpose of acceptance testing is that, once completed successfully, and provided certain additional (contractually agreed) acceptance criteria are met, the sponsors will then sign off on the system as satisfying the contract (previously agreed between sponsor and manufacturer), and deliver final payment. software development, UAT is one of the final stages of a project and often occurs before a client or customer accepts the new system. user requirements specification.Test-designers draw up formal tests and devise a range of severity levels. Ideally the designer of the user acceptance tests should not be the creator of the formal integration and system test cases for the same system. The UAT acts as a final verification of the required business function and proper functioning of the system, emulating real-world usage conditions on behalf of the paying client or a specific large customer. If the software works as intended and without issues during normal use, one can reasonably extrapolate the same level of stability in production. software crashes; testers and developers previously identify and fix these issues during earlier unit testing, integration testing, and system testing phases.The results of these tests give confidence to the clients as to how the system will perform in production. There may also be legal or contractual requirements for acceptance of the system.==Quantified User Acceptance Testing (Q-UAT or, more simply, the "Quantified Approach") is a revised Business Acceptance Testing process which aims to provide a smarter and faster alternative to the traditional UAT phase.  Depth-testing is carried out against business requirements only at specific planned points in the application or service under test. A reliance on better quality code-delivery from the development/build phase is assumed and a complete understanding of the appropriate business process is a pre-requisite. This methodology - if carried out correctly - results in a quick turnaround against plan, a decreased number of test scenarios which are more complex and wider in breadth than traditional UAT and ultimately the equivalent confidence-level attained via a shorter delivery-window, allowing products/changes to come to market quicker.The Q-UAT approach depends on a "gated" three-dimensional model. The key concepts are:# Linear Testing (LT, the 1st dimension)# Recursive Testing (RT, the 2nd dimension)# Adaptive Testing (AT, the 3rd dimension).The four  "gates" which conjoin and support the 3-dimensional model act as quality safeguards and include contemporary testing concepts such as:* Internal Consistency Checks (ICS)* Major Systems/Services Checks (MSC)* Realtime/Reactive Regression (RTR).The Quantified Approach was shaped by the former "guerilla" method of acceptance testing which was itself a response to testing phases which proved too costly to be sustainable for many small/medium-scale projects.Acceptance testing is a term used in agile software development methodologies, particularly Extreme Programming, referring to the functional testing of a user story by the software development team during the implementation phase.The customer specifies scenarios to test when a user story has been correctly implemented. A story can have one or many acceptance tests, whatever it takes to ensure the functionality works. Acceptance tests are black box system tests. Each acceptance test represents some expected result from the system. Customers are responsible for verifying the correctness of the acceptance tests and reviewing test scores to decide which failed tests are of highest priority. Acceptance tests are also used as regression tests prior to a production release. A user story is not considered complete until it has passed its acceptance tests. This means that new acceptance tests must be created for each iteration or the development team will report zero progress.  Typical types of acceptance testing include the following;User acceptance testing::This may include factory acceptance testing, i.e. the testing done by factory users before the factory is moved to its own site, after which site acceptance testing may be performed by the users at the site.;Operational Acceptance Testing (OAT):Also known as operational readiness testing, this refers to the checking done to a system to ensure that processes and procedures are in place to allow the system to be used and maintained. This may include checks done to back-up facilities, procedures for disaster recovery, training for end users, maintenance procedures, and security procedures.;Contract and regulation acceptance testing:In contract acceptance testing, a system is tested against acceptance criteria as documented in a contract, before the system is accepted. In regulation acceptance testing, a system is tested to ensure it meets governmental, legal and safety standards.;Alpha and beta testing:Alpha testing takes place at developers sites, and involves testing of the operational system by internal staff, before it is released to external customers. Beta testing takes place at customers sites, and involves testing by a group of customers who use the system at their own locations and provide feedback, before the system is released to other customers. The latter is often called â€œfield testingâ€�. Development Environment* Development Testing Environment* Testing Environment* Development Integration Testing* Development System Testing* System Integration Testing* User Acceptance Testing* Production Environment FitNesse, a fork of Fit* Framework for Integrated Test (Fit)* iMacros* ItsNat Java Ajax web framework with built-in, server based, functional web testing capabilities.* Ranorex* Selenium (software)* Test Automation FX* Watir* Fabasoft app.test for automated acceptance tests *Acceptance sampling*Black box testing*Development stage*Dynamic testing*Grey box testing*Software testing*System testing*Test-driven development*Unit testing*White box testing    by  * Article   from  * Article   from